#!/usr/bin/env bash


msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    # shellcheck disable=SC2034
    NOFORMAT='\033[0m' GRAY='\033[0;90m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    # shellcheck disable=SC2034
    NOFORMAT='' GRAY='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}


parse_params() {
  # default values of variables set from params
  create_upstream=1
  # prefix="$(git config github.user)/"
  branch=''
  remove=0
  remove_remote=0

  while :; do
    case "${1-}" in
    -r | --remove)
      remove=1
      shift
      ;;
    -rr | --remove-remote)
      remove_remote=1
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  # if a branch was not specified, generate one based on the prefix and folder name
  if [[ -z "$branch" ]]; then
    branch="${args[0]}"
  fi

  return 0
}


branch=$1

echo "${GREEN}Cleaning worktree"
eval "git worktree remove ${1}"
git worktree prune



if [[ $remove -eq 1 ]]; then
  echo "${GREEN}Removing branch"
  git branch -D $1
fi

if [[ $remove_remote -eq 1 ]]; then
  echo "${GREEN}Removing local & remote branchs"
  git push -d origin $1
fi