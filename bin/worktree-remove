#!/usr/bin/env bash


msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    # shellcheck disable=SC2034
    NOFORMAT='\033[0m' GRAY='\033[0;90m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    # shellcheck disable=SC2034
    NOFORMAT='' GRAY='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}


parse_params() {
  # default values of variables set from params
  create_upstream=1
  # prefix="$(git config github.user)/"
  branch=''
  remove_remote=0

  while :; do
    case "${1-}" in
    -rr | --remove-remote)
      remove_remote=1
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  # if a branch was not specified, generate one based on the prefix and folder name
  if [[ -z "$branch" ]]; then
    branch="${args[0]}"
  fi

  return 0
}

run_command() {
  local message=$1
  shift
  echo >&2 -ne "$message "

  ("$@") &
  show_spinner "$!"
  # shellcheck disable=SC2181
  if [ $? -eq 0 ]; then
    echo >&2 -e " ${GREEN}Done.${NOFORMAT}"
  else
    echo >&2 -e " ${RED}FAILED.${NOFORMAT}"
    exit 1
  fi
}
function shutdown() {
  tput cnorm # reset cursor
}
trap shutdown EXIT

function cursorBack() {
  echo -en "\033[$1D"
}

function show_spinner() {
  # make sure we use non-unicode character type locale 
  # (that way it works for any locale as long as the font supports the characters)
  local LC_CTYPE=C

  local pid=$1 # Process Id of the previous running command

  local spin='⣾⣽⣻⢿⡿⣟⣯⣷'
  local charwidth=3

  local i=0
  tput civis # cursor invisible
  while kill -0 $pid 2>/dev/null; do
    local i=$(((i + $charwidth) % ${#spin}))
    printf "%s" "${spin:$i:$charwidth}"

    cursorBack 1
    sleep .1
  done
  tput cnorm
  wait $pid # capture exit code
  return $?
}


branch=$1

run_command "${GREEN}Cleaning worktree" git worktree remove ${1}
git worktree prune

run_command "${GREEN}Removing branch" git branch -D $1

run_command "${GREEN}Removing remote branch" git push -d origin $1
